#!/usr/bin/env python
# encoding=UTF-8

# Copyright Â© 2009-2019 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

from __future__ import print_function

import argparse
import cPickle as pickle
import datetime
import errno
import fcntl
import locale
import logging
import os
import re

import debianbts

exec {b''}.pop()  # Python 2.7 is required

if hasattr(debianbts, 'SOAPpy'):
    debianbts.URL = re.sub('^http://', 'https://', debianbts.URL)
    debianbts.server = debianbts.SOAPpy.SOAPProxy(debianbts.URL, debianbts.NS)  # pylint: disable=no-member
    # XXX Caveat: while debianbts can speak to the BTS over HTTPS, to the best of
    # our knowledge, it does not verify the server's TLS certificate. It's a shame,
    # but it's still better than talking to the BTS over HTTP.

try:
    import unidecode
except ImportError:
    encoding_error_handler = 'replace'
else:
    import codecs
    def encoding_error_handler(exception):
        if isinstance(exception, (UnicodeEncodeError, UnicodeTranslateError)):
            return unicode(unidecode.unidecode(exception.object[exception.start:exception.end])), exception.end
        else:
            raise TypeError("Don't know how to handle {exc} in error callback".format(exc=type(exception).__name__))
    codecs.register_error('unidecode', encoding_error_handler)
    encoding_error_handler = 'unidecode'

encoding = locale.getpreferredencoding()

def encode(s):
    return s.encode(encoding, encoding_error_handler)

class xdg(object):
    '''
    tiny replacement for PyXDG's xdg.BaseDirectory
    '''
    xdg_data_home = os.environ.get('XDG_DATA_HOME') or ''
    if not os.path.isabs(xdg_data_home):
        xdg_data_home = os.path.join(os.path.expanduser('~'), '.local', 'share')

    @classmethod
    def save_data_path(cls, resource):
        path = os.path.join(cls.xdg_data_home, resource)
        try:
            os.makedirs(path, 0o700)
        except OSError:
            if not os.path.isdir(path):
                raise
        return path

class dir_lock(object):

    def __init__(self, path):
        self._path = path
        self._fd = None

    def __enter__(self):
        if self._fd is not None:
            raise RuntimeError('{self!r} is already locked'.format(self=self))
        self._fd = os.open(self._path, os.O_RDONLY)
        try:
            fcntl.flock(self._fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
        except IOError as exc:
            if exc.errno == errno.EWOULDBLOCK:
                exc.filename = os.path.abspath(self._path)
            raise

    def __exit__(self, ex_type, ex_value, ex_traceback):
        if self._fd is None:
            return
        os.close(self._fd)
        self._fd = None

def get_email():
    return os.getenv('REPORTBUGEMAIL') or os.getenv('EMAIL') or os.getenv('DEBEMAIL')

def fetch_bugs(requests, options):
    email = get_email()
    os.chdir(xdg.save_data_path('freshbugs'))
    stamp_filename = 'freshbugs.stamp'
    with dir_lock('.'):
        try:
            with open(stamp_filename, 'rb') as stamp_file:
                stamp = pickle.load(stamp_file)
        except IOError as ex:
            if ex.errno == errno.ENOENT:
                stamp = {}
            else:
                raise
        bugs = set()
        for request in requests:
            try:
                bugs.add(int(request, 10))
            except ValueError:
                for key in 'maint', 'submitter', 'owner', 'correspondent':
                    bugs_chunk = debianbts.get_bugs(key, request)
                    bugs.update(bugs_chunk)
        bugs = debianbts.get_status(list(bugs))
        bugs.sort(key=(lambda bug: bug.log_modified), reverse=True)
        new_stamp = {}
        ancient_timestamp = datetime.datetime(1900, 1, 1)
        for bug in bugs:
            no = int(bug.bug_num)
            new_stamp[no] = bug.log_modified
            if options.all or bug.log_modified > stamp.get(no, ancient_timestamp):
                print('Package: {pkg}'.format(pkg=bug.package))
                if bug.originator is not None:
                    submitter_email = bug.originator
                    match = re.search('<(.*)>', submitter_email)
                    if match is not None:
                        submitter_email = match.group(1)
                    if submitter_email != email:
                        print('Submitter: {user}'.format(user=encode(bug.originator)))
                print('Subject: {subject}'.format(subject=encode(bug.subject)))
                print('Date: {date}'.format(date=bug.log_modified))
                print('Location: https://bugs.debian.org/{n}'.format(n=no))
                print()
        if options.dry_run:
            return
        if not options.clean:
            merged_stamp = dict(stamp)
            merged_stamp.update(new_stamp)
            new_stamp = merged_stamp
        with open(stamp_filename + '.tmp', 'wb') as stamp_file:
            pickle.dump(new_stamp, stamp_file, protocol=-1)
        os.rename(stamp_filename + '.tmp', stamp_filename)

class ArgumentParser(argparse.ArgumentParser):
    def __init__(self):
        argparse.ArgumentParser.__init__(self)
        self.add_argument('--dry-run', action='store_true', help='make cache read-only')
        self.add_argument('--clean', action='store_true', help='remove old items from cache')
        self.add_argument('--all', action='store_true', help='print all selected bugs\' details')
        self.add_argument('request', metavar='REQUEST', nargs='+', help='either a bug number or an e-mail address')

def main():
    options = ArgumentParser().parse_args()
    logging.basicConfig(level=logging.ERROR)
    fetch_bugs(options.request, options)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
