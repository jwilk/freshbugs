#!/usr/bin/python

from __future__ import with_statement

import datetime
import errno
import fcntl
import locale
import os
import sys
import cPickle as pickle

import debianbts

encoding = locale.getpreferredencoding()

class file_lock(object):
    def __init__(self, filename):
        self._filename = filename + '.lock'

    def __enter__(self):
        self._fd = os.open(self._filename, os.O_CREAT | os.O_RDWR | os.O_TRUNC, 0666)
        fcntl.flock(self._fd, fcntl.LOCK_EX | fcntl.LOCK_NB)

    def __exit__(self, ex_type, ex_value, ex_traceback):
        os.unlink(self._filename)
        os.close(self._fd)

def fetch_bugs(requests):
    basename, ext = os.path.splitext(__file__)
    stamp_filename = '%s.stamp' % basename
    with file_lock(stamp_filename):
        try:
            with open(stamp_filename, 'rb') as stamp_file:
                stamp = pickle.load(stamp_file)
        except IOError, ex:
            if ex.errno == errno.ENOENT:
                stamp = {}
            else:
                raise
        bugs = set()
        for request in requests:
            try:
                bugs.add(int(request, 10))
            except ValueError:
                for key in 'maint', 'submitter', 'owner', 'correspondent':
                    bugs_chunk = debianbts.get_bugs(key, request)
                    bugs.update(bugs_chunk)
        bugs = debianbts.get_status(*bugs)
        bugs.sort(key = lambda bug: bug.lastaction, reverse=True)
        new_stamp = {}
        ancient_timestamp = datetime.datetime(1900, 1, 1)
        for bug in bugs:
            no = int(bug.nr)
            new_stamp[no] = bug.lastaction
            if bug.lastaction > stamp.get(no, ancient_timestamp):
                print 'Package: %s' % bug.package
                print 'Subject: %s' % bug.summary.encode(encoding, 'replace')
                print 'Date: %s' % bug.lastaction
                print 'Location: http://bugs.debian.org/%d' % no
                print
        with open(stamp_filename + '~', 'wb') as stamp_file:
            pickle.dump(new_stamp, stamp_file, protocol=-1)
        os.rename(stamp_filename + '~', stamp_filename)

def main():
    if len(sys.argv) < 2:
        print >>sys.stderr, 'Usage: %s <request>...\n' % sys.argv[0]
        sys.exit(1)
    fetch_bugs(sys.argv[1:])

if __name__ == '__main__':
    main()

# vim:ts=4 sw=4 et
