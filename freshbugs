#!/usr/bin/env python3
# encoding=UTF-8

# Copyright © 2009-2019 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import datetime
import errno
import fcntl
import inspect
import json
import locale
import logging
import os
import pickle
import re
import sys

import debianbts

async def _(): f'{await "# Python >= 3.7 is required #"}'

try:
    import unidecode
except ImportError:
    encoding_error_handler = 'replace'
else:
    import codecs
    def encoding_error_handler(exception):
        if isinstance(exception, (UnicodeEncodeError, UnicodeTranslateError)):
            return unidecode.unidecode(exception.object[exception.start:exception.end]), exception.end
        else:
            raise TypeError(f"Don't know how to handle {type(exception).__name__} in error callback")
    codecs.register_error('unidecode', encoding_error_handler)
    encoding_error_handler = 'unidecode'

sys.stdout.reconfigure(
    encoding=locale.nl_langinfo(locale.CODESET),
    errors=encoding_error_handler,
)

class xdg:
    '''
    tiny replacement for PyXDG's xdg.BaseDirectory
    '''
    xdg_data_home = os.environ.get('XDG_DATA_HOME') or ''
    if not os.path.isabs(xdg_data_home):
        xdg_data_home = os.path.join(os.path.expanduser('~'), '.local', 'share')

    @classmethod
    def save_data_path(cls, resource):
        path = os.path.join(cls.xdg_data_home, resource)
        try:
            os.makedirs(path, 0o700)
        except OSError:
            if not os.path.isdir(path):
                raise
        return path

class dir_lock:

    def __init__(self, path):
        self._path = path
        self._fd = None

    def __enter__(self):
        if self._fd is not None:
            raise RuntimeError(f'{self!r} is already locked')
        self._fd = os.open(self._path, os.O_RDONLY)
        try:
            fcntl.flock(self._fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
        except OSError as exc:
            if exc.errno == errno.EWOULDBLOCK:
                exc.filename = os.path.abspath(self._path)
            raise

    def __exit__(self, ex_type, ex_value, ex_traceback):
        if self._fd is None:
            return
        os.close(self._fd)
        self._fd = None

def get_email():
    return os.getenv('REPORTBUGEMAIL') or os.getenv('EMAIL') or os.getenv('DEBEMAIL')

def bts_get_bugs(key, value):
    # • In python-debianbts 2.10, keyword args were added
    #   and positional args were deprecated:
    #   https://github.com/venthur/python-debianbts/commit/7ca33c7f902748ce
    # • In python-debianbts 4.0, positional args were removed:
    #   https://github.com/venthur/python-debianbts/commit/78a25ba3da2e2ce6
    argspec = inspect.getfullargspec(debianbts.get_bugs)
    if argspec.varkw:
        return debianbts.get_bugs(**{key: value})
    else:
        return debianbts.get_bugs(key, value)

def fetch_bugs(requests, options):
    email = get_email()
    os.chdir(xdg.save_data_path('freshbugs'))
    stamp_filename = 'freshbugs.stamp'
    with dir_lock('.'):
        try:
            with open(stamp_filename, 'rb') as stamp_file:
                stamp_bytes = stamp_file.read()
        except OSError as ex:
            if ex.errno == errno.ENOENT:
                stamp_bytes = b'{}'
            else:
                raise
        if stamp_bytes[:1] == b'{':
            stamp = json.loads(stamp_bytes)
            stamp = {
                int(n): datetime.datetime.strptime(dt, '%Y-%m-%dT%H:%M:%S')
                for n, dt in stamp.items()
            }
        else:
            stamp = pickle.loads(stamp_bytes, encoding='bytes')
        bugs = set()
        for request in requests:
            try:
                bugs.add(int(request, 10))
            except ValueError:
                for key in 'maint', 'submitter', 'owner', 'correspondent':
                    bugs_chunk = bts_get_bugs(key, request)
                    bugs.update(bugs_chunk)
        bugs = debianbts.get_status(list(bugs))
        bugs.sort(key=(lambda bug: bug.log_modified), reverse=True)
        new_stamp = {}
        ancient_timestamp = datetime.datetime(1900, 1, 1)
        for bug in bugs:
            no = int(bug.bug_num)
            new_stamp[no] = bug.log_modified
            if options.all or bug.log_modified > stamp.get(no, ancient_timestamp):
                print(f'Package: {bug.package}')
                if bug.originator is not None:
                    submitter_email = bug.originator
                    match = re.search('<(.*)>', submitter_email)
                    if match is not None:
                        submitter_email = match.group(1)
                    if submitter_email != email:
                        print(f'Submitter: {bug.originator}')
                print(f'Subject: {bug.subject}')
                print(f'Date: {bug.log_modified}')
                print(f'Location: https://bugs.debian.org/{no}')
                print()
        if options.dry_run:
            return
        if not options.clean:
            merged_stamp = dict(stamp)
            merged_stamp.update(new_stamp)
            new_stamp = merged_stamp
        with open(stamp_filename + '.tmp', 'wt', encoding='ASCII') as stamp_file:
            json.dump(new_stamp, stamp_file, sort_keys=True, indent=2, default=json_convert)
        os.rename(stamp_filename + '.tmp', stamp_filename)

def json_convert(obj):
    if isinstance(obj, datetime.datetime):
        return obj.isoformat()
    raise TypeError

class ArgumentParser(argparse.ArgumentParser):
    def __init__(self):
        argparse.ArgumentParser.__init__(self)
        self.add_argument('--dry-run', action='store_true', help='make cache read-only')
        self.add_argument('--clean', action='store_true', help='remove old items from cache')
        self.add_argument('--all', action='store_true', help='print all selected bugs\' details')
        self.add_argument('request', metavar='REQUEST', nargs='+', help='either a bug number or an e-mail address')

def main():
    options = ArgumentParser().parse_args()
    logging.basicConfig(level=logging.ERROR)
    fetch_bugs(options.request, options)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
