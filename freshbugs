#!/usr/bin/python

from __future__ import with_statement

import datetime
import errno
import os
import sys
import cPickle as pickle

import debianbts

def time_hack():
    # Dirty hack to fix <http://bugs.debian.org/529488>
    import time
    def hacked_strftime(format, timetuple):
        return datetime.datetime(*timetuple[:6])
    time.strftime = hacked_strftime

def fetch_bugs(emails):
    basename, ext = os.path.splitext(__file__)
    stamp_filename = '%s.stamp' % basename
    try:
        with open(stamp_filename, 'rb') as stamp_file:
            stamp = pickle.load(stamp_file)
    except IOError, ex:
        if ex.errno == errno.ENOENT:
            stamp = {}
        else:
            raise
    bugs = set()
    for key in 'maint', 'submitter', 'owner', 'correspondent':
        for email in emails:
            bugs_chunk = debianbts.get_bugs(key, email)
            bugs.update(bugs_chunk)
    bugs = debianbts.get_status(*bugs)
    bugs.sort(key = lambda bug: bug.lastaction, reverse=True)
    new_stamp = {}
    ancient_timestamp = datetime.datetime(1900, 1, 1)
    for bug in bugs:
        no = int(bug.nr)
        new_stamp[no] = bug.lastaction
        if bug.lastaction > stamp.get(no, ancient_timestamp):
            print 'Package: %s' % bug.package
            print 'Subject: %s' % bug.summary
            print 'Date: %s' % bug.lastaction
            print 'Location: http://bugs.debian.org/%d' % no
            print
    with open(stamp_filename, 'wb') as stamp_file:
        pickle.dump(new_stamp, stamp_file, protocol=-1)

def main():
    if len(sys.argv) < 2:
        print >>sys.stderr, 'Usage: %s <email>...\n' % sys.argv[0]
        sys.exit(1)
    fetch_bugs(sys.argv[1:])

if __name__ == '__main__':
    time_hack()
    main()

# vim:ts=4 sw=4 et
